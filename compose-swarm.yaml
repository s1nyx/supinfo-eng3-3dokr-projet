services:
  vote:
    image: supinfoant/3dokrproject:vote
    ports:
      - "8080:8080"
    networks:
      - frontend
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 1m
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      

  result:
    image: supinfoant/3dokrproject:result
    ports:
     - "8081:8888"
    networks:
     - frontend
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888"]
      interval: 1m
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
  
  worker:
    image: supinfoant/3dokrproject:worker
    networks:
      - backend
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "localhost"]
      interval: 1m
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  redis:
    image: redis:7.2.3-alpine
    networks:
      - frontend
      - backend
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

  postgres:
    image: postgres:16.0-alpine
    networks:
      - frontend
      - backend
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 1m
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s

volumes:
  redisdata:
  postgresdata:

networks:
  frontend:
  backend: