version: '3.9'

services:
  vote:
    build: ./vote
    ports:
      - "8080:8080"
    restart: always
    networks:
      - frontendvote
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  result:
    build:
      context: ./result
      target: prod
    ports:
     - "8081:8888"
    restart: always
    networks:
     - frontendresult
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  worker:
    build: ./worker
    restart: always
    networks:
      - backend
    depends_on:
      - postgres
      - redis

  redis:
    image: redis:7.2.3-alpine
    networks:
      - frontendvote
      - backend
    restart: always
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:16.0-alpine
    networks:
      - frontendresult
      - backend
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redisdata:
  postgresdata:

networks:
  frontendvote:
  frontendresult:
  backend: